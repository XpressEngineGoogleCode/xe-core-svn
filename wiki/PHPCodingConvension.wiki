= PHP Coding Convension <g:plusone size="medium"></g:plusone> =
PHP_CodeSniffer is a Coding Convention tool for PHP, which can be installed by using PEAR. PHP_CodeSniffer for XE needs to be installed separately. 
And you can check that a your PHP Code follows [HowToUsePHPCodeSnifferForXE].

<wiki:toc max_depth="3" />

== File ==
=== File Format ===
Save every file with UTF-8 encoding,  and use Unix-style LF line-endings.

=== PHP Closing Tag ===
Do not use PHP Closing tag “?>” to prevent additional white spaces that could really mess up your website or application.

=== File End Comment ===
Writing comments at the end of the file.
The comments must contain the file name and the file path which should be the relative path of the application root.


*INCORRECT*
{{{
<?php

echo "Here's my code!";

?>
}}}

*INCORRECT*
{{{
<?php

echo "Here's my code!";
}}}

*CORRECT*
{{{
<?php

echo "Here's my code!";

/* End of file myfile.php */
/* Location: ./system/modules/mymodule/myfile.php */
}}}

=== Code Indenting ===
Use Tab characters for code indentation, do not set  the default code indenting value. 

*INCORRECT*
{{{
<?php

   class Test
   {

   }
}}}

*CORRECT*
{{{
<?php

class Test
{

}
}}}


== Control Structures ==
=== {} usage of for, foreach, if, while ===
The opening and closing braces are always written on their own line (i.e. a line break must be placed on both braces). 

*INCORRECT*
{{{
<?php
for($i=0; $i<10; $i++){
}

if(true){ echo 1; }
else{ echo 2; }

if(true) echo 2;
}}}

*CORRECT*
{{{
<?php
for($i = 0; $i < 10; $i++)
{

}

if(true) 
{
   echo 1;
}
else 
{
   echo 2;
}

if(true) 
{
    echo 2;
}
}}}

=== () usage of for, foreach, if, while ===
*INCORRECT*
{{{
<?php
for ( $i=0; $i<10; $i++ )
{
}

if (true) echo 2;
}}}

*CORRECT*
{{{
<?php
for($i = 0; $i < 10; $i++)
{

}

if(true) 
{
   echo 2;
}
}}}

== Values ==
=== Constants ===
Constants should always be fully uppercase.
Constants should be named depend on their applicable scope.
If a constant variable is used globally, then use symbol ‘__’ as its prefix and postfix.  


*INCORRECT*
{{{
<?php
define('myConstant', '1.4.5');   //Can not use lowercase
define('V', '1.4.5');                      //Constant can not be a single letter
define('A_B_C', '1.4.5');            //No semantics, the constant is difficult to understand 
}}}

*CORRECT*
{{{
<?php
define('__ZBXE_VERSION__', '1.4.5'); //A global constant 
define('ZBXE_VERSION', '1.4.5');     //Not a global constant, 
}}}

=== TRUE, FALSE, and NULL ===
TRUE, FALSE, NULL keywords should always be fully uppercase.

*INCORRECT*
{{{
if ($foo == true) 
{
  $bar = false;
}

function foo($bar=null)
{
}
}}}

*CORRECT*
{{{
if ($foo == TRUE)
{
  $bar = FALSE;
}

function foo($bar = NULL)
{
}
}}}

=== Strings ===
When a string is literal (contains no variable substitutions), the apostrophe or "single quote" should always be used to demarcate the string. Because if the string is enclosed in double-quotes, PHP will try to parse its content, so the capability will be decreased.
But if a literal string (e.g. SQL query) itself contains apostrophes or ‘single quote’, it is permitted to demarcate the string with "double quotes".  

*INCORRECT*
{{{
"My String"                    // no variable parsing, so no use for double quotes
"My string $foo"                // needs braces
'SELECT foo FROM bar WHERE baz = \'bag\''    // ugly
}}}

*CORRECT*
{{{
'My String'
"My string {$foo}"
"SELECT foo FROM bar WHERE baz = 'bag'"
}}}

=== Bracket, Parenthetic 공백 ===
Parenthesis and brackets should not use any additional white spaces when declare, do-while, elseif, for, foreach, if, switch, while; the exception is that a space should always follow PHP control structures and logic that  accept argument with parenthesis.

*INCORRECT*
{{{
$arr[ $foo ] = 'foo';

function foo( $bar )
{
}

foreach( $query->result() as $row )
{
}
}}}

*CORRECT*
{{{
$arr[$foo] = 'foo'; // no spaces around array keys

function foo($bar) // no spaces around parenthesis in function declarations
{
}

foreach ($query->result() as $row) // single space following PHP control structures, but not in interior parenthesis
}}}

=== One Statement Per Line ===
Do not combine multiple variables on one line.

*INCORRECT*
{{{
$foo = 'this'; $bar = 'that'; $bat = str_replace($foo, $bar, $bag);
}}}

*CORRECT*
{{{
$foo = 'this';
$bar = 'that';
$bat = str_replace($foo, $bar, $bag);
}}}


== Class ==
=== Class Naming(draft) ===
Class naming in XE should be utilized CamelCase, which states that multiple words shouldn’t separated with an underscore. The Class name must be same as the file name. Do not create multiple classes in a single file. (draft)

*INCORRECT*
{{{
<?php
class databaseConnection extends PDO {
}
}}}

*CORRECT - file name : DatabaseConnection.php*
{{{
<?php
class DatabaseConnection extends PDO 
{
}
}}}

Do not use a special word as a Class name, in order to prevent conflict with other name spaces. 

*INCORRECT*
{{{
class Email
class Xml
class Import
}}}

*CORRECT*
{{{
class PreEmail
class PreXml
class PreImport
}}}

=== Method and Properties Naming(draft) ===
The first character of a method or a variable name should always be lowercase, the methods and variables  should be  named to clearly indicate their function. Similar with Class naming, use CamelCase in the method and variable naming.     

*INCORRECT*
{{{
<?php
class Test
{
  public $LastStatement;
}
}}}

*CORRECT*
{{{
<?php
class Test
{
  public $lastStatement;
}
}}}

=== Default Function and Method Arguments ===
When provide function or Class argument defaults, please follow the below style.

*INCORRECT*
{{{
function foo($bar='',$baz=FALSE)
}}}

*CORRECT*
{{{
function foo($bar = '', $baz = FALSE)
}}}

=== Class Constructor Calls ===
Use () even if there is no argument.

*CORRECT*
{{{
$foo = new MyClassName();
}}}

*CORRECT*
{{{
$foo = new MyClassName($arg1, $arg2);
}}}

=== Function and Method Calls ===

*INCORRECT*
{{{
$var = foo ($bar);
$var = foo($bar,$baz,$quux);
$var = foo($bar=NULL,$baz,$quux);
}}}

*CORRECT*
{{{
$var = foo($bar);
$var = foo($bar, $baz, $quux);
$var = foo($bar = NULL, $baz, $quux);
}}}

=== {} Usage of Class and method ===
*INCORRECT*
{{{
<?php
class databaseConnection extends PDO {
  function init (){
  }
}
}}}


*CORRECT*
{{{
<?php
class DatabaseConnection extends PDO 
{
  function init()
  {
  }
}
}}}


== Commenting ==
=== Class ===
Add comments before the declaration for a Class or a method, add a single line comment to source code if needed.

Comments preceding a Class 
*CORRECT*
{{{
<?php
/**
 * @brief Class  (required)
 * @developer nick or name (required)
 * @date 
 */
class SomeClass 
{
}
}}}


=== method & function ===
Comments preceding a method (function)

*CORRECT*
{{{
/**
 * @brief method  (required)
 * @access public, protected, private  (required)
 * @param $param1 : bla bla  (required if $param exists)
 * @param $param2 : bla bla
 * @return String, boolean, int, void  (required)
 * @developer nick or name (required)
 * @date
 */
function someMethod($param1, $param2)
{
}
}}}

=== Common ===
Use ‘//’ for normal commenting, do not use ‘#’

*CORRECT*
{{{
// break up the string by newlines
$parts = explode("\n", $str);
}}}

Also comment blank lines when commenting multiple lines 
*CORRECT*
{{{
// A longer comment that needs to give greater detail on what is
// occurring and why can use multiple single-line comments.  Try to
// keep the width reasonable, around 70 characters is the easiest to
// read.  Don't hesitate to link to permanent external resources
// that may provide greater detail:
//
// http://example.com/information_about_something/in_particular/
$parts = $this->foo($parts);
}}}



== Operator ==
Add white space before and after Operator

*INCORRECT*
{{{
$a = ‘a’.’b’;
$a||$b;
$a&&$b
$a+$b
$a-$b
}}}

*CORRECT*
{{{
$a = ‘a’ . ‘b’;
$a || $b;
$a && $b
$a + $b
$a - $b
}}}
