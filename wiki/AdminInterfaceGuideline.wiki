#summary UI guideline for administrative interface
#labels Phase-Implementation,UI

<wiki:toc max_depth="2" />

= Introduction =
관리자 인터페이스를 작성할 때 사용할 수 있는 UI 가이드라인입니다. 이 가이드라인에는 관리자 모듈에 포함된 라이브러리를 사용하는 방법도 포함하고 있습니다.

= User Interface Widgets =
관리자 인터페이스에 미리 정의된 위젯에 대한 설명입니다.

== Setting All Checkbox  ==
특정 테이블에서 테이블 헤더(thead) 또는 테이블 푸터(tfoot)에 포함된 체크박스를 클릭했을 때 이와 관련있는 체크박스를 모두 선택합니다. 예를 들어 다음과 같은 테이블이 있다고 가정해보겠습니다.
{{{
<table id="listTable">
<thead>
  <tr>
    <th>Title</th>
    <th><input type="checkbox" data-name="cbox[]" title="모두 체크/해제" /></th>
  </tr>
</thead>
<tfoot>
  <tr>
    <th>Title</th>
    <th><input type="checkbox" data-name="cbox[]" title="모두 체크/해제" /></th>
  </tr>
</tfoot>

<tbody>
  <tr>
    <td>Good morning!</td>
    <td><input type="checkbox" name="cbox[]" /></td>
  </tr>
  <tr>
    <td>즐거운 아침입니다!</td>
    <td><input type="checkbox" name="cbox[]" /></td>
  </tr>
  <tr>
    <td>おはようございます!</td>
    <td><input type="checkbox" name="cbox[]" /></td>
  </tr>
</tbody>
</table>
}}}
약간의 CSS를 더하면 이 테이블은 화면에서 다음과 같이 보입니다. CSS는 중요한 내용이 아니므로 여기서 다루지 않습니다.

http://xe-core.googlecode.com/svn/wiki/img/AdminuiCheckboxExample.png

이제 테이블 헤더 또는 푸터에 있는 체크 박스를 클릭하면 다음과 같은 과정을 거칩니다.
 # 클릭한 체크 박스에 `data-name` 속성이 있는지 찾고, 있으면 이 값을 기억해둡니다.
 # 테이블에서 `data-name` 속성의 값과 일치하는 `name`을 가진 체크박스를 모두 구합니다.
 # 1에서 클릭한 체크박스가 체크되어 있으면 2에서 구한 체크박스를 모두 체크하고, 그렇지 않으면 2에서 구한 체크 박스를 모두 체크 해제합니다.

위 그림에서는 가장 상단에 있는 체크박스나 가장 하단에 있는 체크박스를 클릭하면 테이블의 모든 체크박스가 선택되고, 다시 한번 가장 상단이나 가장 하단에 있는 체크 박스를 클릭하면 모든 체크박스의 체크 표시가 해제됩니다.

체크박스를 모두 업데이트하고 나면 체크박스가 속한 `table` 요소에 `update.checkbox`라는 사용자정의 이벤트를 발생시킵니다. 따라서, 체크박스를 모두 업데이트하고 난 후에 실행하고 싶은 코드가 있다면 해당 테이블에 `update.checkbox` 이벤트 핸들러를 바인딩하면 됩니다.
{{{
jQuery('#listTable')
    .bind('update.checkbox', function(event, name, checked) {
        // 테이블의 체크박스를 모두 업데이트 한 후 실행할 코드
        // name은 업데이트한 체크박스의 name
        // checked는 업데이트한 체크박스의 체크 여부
    });
}}}

== Toggle Contents ==
메뉴 등과 같이 사용자의 액션에 따라 콘텐츠를 토글할 때 사용합니다. 토글 콘텐츠는 크게 두 개의 요소로 이루어지는데, 하나는 앵커 요소로 이 요소를 클릭하면 콘텐츠를 보이거나 숨기며 다른 하나는 콘텐츠를 포함하는 콘텐츠 요소입니다.

=== Basics ===
토글 콘텐츠에 사용할 앵커 요소는 클래스 속성에 `tgAnchor`라는 클래스 이름을 *반드시* 포함해야 하며, 콘텐츠 블럭은 클래스 속성에 `tgContent`라는 클래스 이름을 *반드시* 포함해야 합니다. 앵커 요소는 클릭 이벤트를 받아서 콘텐츠를 보이거나 감추는 기능을 하며, 콘텐츠를 보이거나 감출 때 사용할 효과에 대한 정보를 포함하기도 합니다. 예를 들어, 보이거나 숨길 콘텐츠의 아이디는 href 속성을 통해 다음과 같이 정의할 수 있습니다.
{{{
<a href="#content" class="tgAnchor">보이기/숨기기</a>
<div id="content" class="tgContent">보이거나 숨길 콘텐츠</div>
}}}
위 코드는 앵커 요소 `href` 속성의 값으로 `#content`를 사용하고, 콘텐츠 영역의 아이디로 `content`를 사용하여 두 개의 요소를 서로 연결했습니다. 앵커 요소가 콘텐츠 영역을 가리켜야 한다는 점을 명심하셔야 합니다.
 
또한 `data-effect` 속성을 통해 사용할 효과의 종류를, `data-duration` 속성을 통해 효과가 진행될 시간을 정의할 수 있습니다. 다음 코드는 콘텐츠를 펼쳐지거나 접을 때 슬라이딩 효과를 사용하는 예제입니다.
{{{
<a href="#content" class="tgAnchor" data-effect="slide">보이기/숨기기</a>
<div id="content" class="tgContent">보이거나 숨길 콘텐츠</div>
}}}
앵커 요소에 사용할 수 있는 옵션 속성은 다음과 같습니다. 접두어 `data-`는 생략했습니다.
 * *`effect`* : 접거나 펼칠 때 사용할 효과. `slide`, `fade`, `none` 중 선택. 기본값은 `none`
 * *`duration`* : 효과를 실행할 시간. `fast`, `slow` 또는 밀리초 단위의 시간 숫자

=== Events ===
프로그램에서 사용자 액션을 통하지 않고 토글 콘텐츠를 펼치거나 접으려면 jQuery 함수를 사용해 앵커 요소를 선택한 후 사용자 정의 이벤트 `open.tc` 또는 `close.tc`를 실행합니다. jQuery를 사용하면 다음과 같이 실행할 수  있습니다. 콘텐츠를 펼칠 때는 `'open.tc'`를 접을 때는 `'close.tc'`를 사용합니다.
{{{
<a href="#content" class="tgAnchor">보이기/숨기기</a>

<script type="text/javascript">
jQuery('a.tgAnchor').trigger('open.tc'); // 콘텐츠 펼치기
</script>
}}}

만약 콘텐츠를 펼치기 전/후 또는 접기 전/후에 어떤 코드를 실행하고 싶다면 앞서 말한 이벤트에 `after-` 또는 `before-`를 추가하여 이벤트 핸들러를 할당하면 됩니다. 예를 들어, *콘텐츠를 펼치기 전*에 실행하고 싶은 코드는 다음과 같이 할당할 수 있습니다.
{{{
jQuery('a.tgAnchor')
    .bind('before-open.tc', function(){
        // 콘텐츠를 펼치기 직전에 실행할 코드
    });
}}}

마찬가지로 닫은 직후에 실행할 코드는 다음과 같이 할당할 수 있습니다. `after-`로 할당한 이벤트 핸들러는 애니메이션이 모두 끝난 후에 실행된다는 점에 주의하셔야 합니다.
{{{
jQuery('a.tgAnchor')
    .bind('after-close.tc', function(){
        // 콘텐츠를 접은 직후 실행할 코드
    });
}}}

== Modal Window ==
특정 콘텐츠에만 집중하고 다른 작업은 진행할 수 없을 때 사용하는 위젯입니다. 모달창을 표시하면 다음과 같은 화면을 볼 수 있습니다.

http://xe-core.googlecode.com/svn/wiki/img/AdminUIModalExample.png

== Basics ==
모달창을 표시하기 위한 앵커 요소는 클래스 속성에 `modalAnchor` 클래스 이름을 *반드시* 포함해야 합니다. 또한 모달창으로 사용할 `div` 요소는 클래스 속성에 `modal` 클래스를 반드시 포함해야 합니다.

또한 모달 앵커 요소의 `href` 속성은 모달 콘텐츠 `div` 요소의 아이디를 가리켜야 합니다. 예를 들어 콘텐츠 요소의 아이디가 `modalWindow`라면 앵커 요소는 다음과 같이 작성할 수 있습니다.
{{{
<a href="#modalWindow" class="modalAnchor">모달창 열기</a>
}}}

모달창은 한 개의 자식 요소를 포함하는데, 자식 요소는 `fg` 클래스 이름을 *반드시* 포함해야 합니다. 가장 간단한 형태의 모달창 HTML 마크업은 다음과 같이 작성할 수 있습니다.
{{{
<a href="#modalWindow" class="modalAnchor">모달창 열기</a>
<div id="modalWindow" class="modal">
    <div class="fg">
        Hello, world
    </div>
</div>
}}}

위 코드를 문서에 포함한 후 문서를 다시 읽고 버튼을 클릭하면 다음과 같은 화면을 볼 수 있습니다.

http://xe-core.googlecode.com/svn/wiki/img/AdminUIModalExample.png

뿐만아니라 앵커 요소에는 모달창을 열 때 사용할 옵션을 설정할 수 있습니다. 각 옵션은 `data-*` 와 같은 형태의 속성을 통해 설정합니다. 예를 들어, 모달창이 페이드인 또는 페이드아웃되는 속도를 조절하려면 `data-duration` 옵션을 다음과 같이 설정합니다.
{{{
<a href="#modalWindow" class="modalAnchor" data-duration="fast">모달창 열기</a>
}}}

현재 사용할 수 있는 옵션은 다음과 같습니다. 접두어 `data-`는 생략했습니다.
 * *`effect`* : 모달창을 표시할 때 사용할 효과. 선택 가능한 값은 `fade`(기본값), `rise`
 * *`duration`* : 효과를 실행할 시간. fast, slow 또는 밀리초 단위의 시간 숫자

== Events ==
프로그램에서 사용자 액션을 통하지 않고 모달창을 띄우거나 닫고 싶으면 jQuery 함수를 사용해 앵커 요소를 선택한 후 선택한 jQuery 요소에서 `open.mw` 또는 `close.mw`를 사용합니다. 모달창을 열려면 `open.mw`를, 닫으려면 `close.mw`를 사용합니다.
{{{
<a href="#modalWindow" class="modalAnchor">모달창 열기</a>

<script>
jQuery('a.modalAnchor').trigger('open.mw');
</script>
}}}
만약 모달창을 열거나 닫기 전에 실행하고 싶은 코드가 있다면 이벤트 이름 앞에 `before-`, `after-`를 접두어로 추가하여 이벤트 핸들러를 할당하면 됩니다. 예를 들어, 모달창을 *열기 전*에 실행하고 싶은 코드는 다음과 같이 할당할 수 있습니다.
{{{
jQuery('a.modalAnchor')
   .bind('before-open.mw', function(){
      // 실행할 코드
   });
}}}
마찬가지로 모달창을 닫은 직후에 실행할 코드는 `after-close.mw` 이벤트를 사용하면 됩니다.
{{{
jQuery('a.modalAnchor')
   .bind('after-close.mw', function(){
      // 실행할 코드
   });
}}}