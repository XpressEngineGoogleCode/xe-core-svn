= PHP Coding Convension <g:plusone size="medium"></g:plusone> =
Coding Convention은 XE를 개발함에 있어 일관된 코드 및 주석 형식을 유지함으로 보다 효율적인 개발을 할 수 있기 위함입니다. [HowToUsePHPCodeSnifferForXE]로 Coding Convention 준수 여부를 확인 할 수 있습니다.

<wiki:toc max_depth="3" />

== File ==
=== File Format ===
File은 항상 UTF-8 encoding으로 저장한다. 또한 줄끝 문자는 Unix Type을 따른다(LF)

=== PHP Closing Tag ===
PHP Closing Tag인 ?> 문자 뒤에 공백 문자가 포함될 경우 발생할 수 있는 오류를 줄이고자 Closing Tag를 사용하지 않는다.

=== File End Comment ===
다음과 같은 주석을 표기하여 Source의 마지막임을 표현한다.
주석에 표기해야 할 내용은 파일명과 위치 정보이며 위치정보는 application root로부터의 상태 경로로 표기한다.

*INCORRECT*
{{{
<?php

echo "Here's my code!";

?>
}}}

*INCORRECT*
{{{
<?php

echo "Here's my code!";
}}}

*CORRECT*
{{{
<?php

echo "Here's my code!";

/* End of file myfile.php */
/* Location: ./system/modules/mymodule/myfile.php */
}}}

=== Code Indenting ===
indent는 tab을 사용하고, 기본 indent는 부여하지 않는다.

*INCORRECT*
{{{
<?php

   class Test
   {

   }
}}}

*CORRECT*
{{{
<?php

class Test
{

}
}}}


== Control Structures ==
=== for, foreach, if, while 의 { } 사용 ===
{ } 는 항상 줄바꿈하여 사용한다.

*INCORRECT*
{{{
<?php
for($i=0; $i<10; $i++){
}

if(true){ echo 1; }
else{ echo 2; }

if(true) echo 2;
}}}

*CORRECT*
{{{
<?php
for($i = 0; $i < 10; $i++)
{

}

if(true) 
{
   echo 1;
}
else 
{
   echo 2;
}

if(true) 
{
    echo 2;
}
}}}

=== for, foreach, if, while 의 ( ) 사용 ===
*INCORRECT*
{{{
<?php
for ( $i=0; $i<10; $i++ )
{
}

if (true) echo 2;
}}}

*CORRECT*
{{{
<?php
for($i = 0; $i < 10; $i++)
{

}

if(true) 
{
   echo 2;
}
}}}

== Values ==
=== Constants ===
상수의 사용은 기본적으로 대문자를 원칙으로 한다.
상수의 사용 범위에 따라 네이밍을 달리 한다.
XE 전역에서 사용되는 경우 prefix, postfix에 '__'를 사용한다.

*INCORRECT*
{{{
<?php
define('myConstant', '1.4.5');   //소문자 사용 금지
define('V', '1.4.5');                      //한글자로 된 상수 문자 사용 금지
define('A_B_C', '1.4.5');            //의미 없는 문자로 그 뜻을 알기 어려운 문자 사용 금지
}}}

*CORRECT*
{{{
<?php
define('__ZBXE_VERSION__', '1.4.5'); //전역 상수
define('ZBXE_VERSION', '1.4.5');     //XE 전체에서 사용되지 않을 경우 사용 가능
}}}

=== TRUE, FALSE, and NULL ===
TRUE, FALSE, NULL과 같이 PHP 내부적으로 미리 정의된 상수는 대문자만을 사용한다.

*INCORRECT*
{{{
if ($foo == true) 
{
  $bar = false;
}

function foo($bar=null)
{
}
}}}

*CORRECT*
{{{
if ($foo == TRUE)
{
  $bar = FALSE;
}

function foo($bar = NULL)
{
}
}}}

=== Strings ===
String을 정의할 경우 double-quotation을 사용하지 않는다. double-quotation의 경우 해당 내용을 php가 parsing 함으로 속도 저하의 원인이 된다.
단 Query와 같이 String 내에 single-quotation을 사용해야 하는 경우에는 double-quotation을 사용할 수 있다.

*INCORRECT*
{{{
"My String"                    // no variable parsing, so no use for double quotes
"My string $foo"                // needs braces
'SELECT foo FROM bar WHERE baz = \'bag\''    // ugly
}}}

*CORRECT*
{{{
'My String'
"My string {$foo}"
"SELECT foo FROM bar WHERE baz = 'bag'"
}}}

=== Bracket, Parenthetic 공백 ===
declare, do-while, elseif, for, foreach, if, switch, while 등에서 bracket 사용시 맨 앞뒤 공백은 사용하지 않는다.
php에서 로직을 control 하기 위해 사용하는 곳에는 예외로 한다. 

*INCORRECT*
{{{
$arr[ $foo ] = 'foo';

function foo( $bar )
{
}

foreach( $query->result() as $row )
{
}
}}}

*CORRECT*
{{{
$arr[$foo] = 'foo'; // no spaces around array keys

function foo($bar) // no spaces around parenthesis in function declarations
{
}

foreach ($query->result() as $row) // single space following PHP control structures, but not in interior parenthesis
}}}

=== One Statement Per Line ===
한줄에 여러개의 변수를 선언하지 않는다.

*INCORRECT*
{{{
$foo = 'this'; $bar = 'that'; $bat = str_replace($foo, $bar, $bag);
}}}

*CORRECT*
{{{
$foo = 'this';
$bar = 'that';
$bat = str_replace($foo, $bar, $bag);
}}}


== Class ==
=== Class Naming(draft) ===
Class의 Naming은 CamelCase를 따른다. 또한 Class의 이름과 File의 작명은 항상 같게 만든다.
1개의 파일 내 여러개의 Class를 사용하지 않는다.(draft)

*INCORRECT*
{{{
<?php
class databaseConnection extends PDO {
}
}}}

*CORRECT - file명 DatabaseConnection.php*
{{{
<?php
class DatabaseConnection extends PDO 
{
}
}}}

Class 명은 일반적인 단어를 사용하지 않는다.
일반적인 단어를 사용할 경우 다른 프로그램과의 네임스페이스 충돌로 인한 오작동의 우려가 있다.

*INCORRECT*
{{{
class Email
class Xml
class Import
}}}

*CORRECT*
{{{
class PreEmail
class PreXml
class PreImport
}}}

=== Method and Properties Naming(draft) ===
method와 변수명의 Naming은 첫 글자는 소문자로 시작하는 lowerCamelCase를 따른다.
변수명은 가능한한 매우 쉬운 단어를 사용해야 하며 변수명만 보고서도 무엇을 의미하는지 알 수 있도록 명확히 작명해야 한다.

*INCORRECT*
{{{
<?php
class Test
{
  public $LastStatement;
}
}}}

*CORRECT*
{{{
<?php
class Test
{
  public $lastStatement;
}
}}}

=== Default Function and Method Arguments ===
function and Class method의 Arguments 기본 값을 사용할 경우 다음과 같은 형태를 따른다. 

*INCORRECT*
{{{
function foo($bar='',$baz=FALSE)
}}}

*CORRECT*
{{{
function foo($bar = '', $baz = FALSE)
}}}

=== Class Constructor Calls ===
Argument가 없는 경우에도 ( )사용하는 형태를 따른다.

*CORRECT*
{{{
$foo = new MyClassName();
}}}

*CORRECT*
{{{
$foo = new MyClassName($arg1, $arg2);
}}}

=== Function and Method Calls ===

*INCORRECT*
{{{
$var = foo ($bar);
$var = foo($bar,$baz,$quux);
$var = foo($bar=NULL,$baz,$quux);
}}}

*CORRECT*
{{{
$var = foo($bar);
$var = foo($bar, $baz, $quux);
$var = foo($bar = NULL, $baz, $quux);
}}}

=== class와 method 의 { } 사용 ===
*INCORRECT*
{{{
<?php
class databaseConnection extends PDO {
  function init (){
  }
}
}}}


*CORRECT*
{{{
<?php
class DatabaseConnection extends PDO 
{
  function init()
  {
  }
}
}}}


== Commenting ==
=== Class ===
주석은 [http://www.phpdoc.org/docs/latest/index.html phpDoc]의 내용을 기본적으로 따라 작성한다.
다음은 자주 사용되어지는 tags의 목록이다.

|| *Tag* || *Description* || *Example* ||
|| @internal || 간략한 설명을 넣을 경우 || ||
|| {@internal[긴 설명]} || 긴 설명을 넣을 경우 || ||
|| @author || 개발자명 || nick or name <my.name@example.com> ||
|| @package || 패키지명 || modules/document/ ||
|| @deprecated || 사용 중지된 class or method || @deprecated No longer used by internal code and not recommended. ||
|| @param || method에 사용되는 parameter를 순서대로 적는다.<br>사용 형태는 "@param <Type> [name] [<description>]"와 같이 적는다. || @param mixed[] $array Array structure to count the elements of. ||
|| @return || method가 반환하는 값을 적는다. <br>사용형태는 "@return <Type> [description]"와 같이 적는다. || @param mixed[] $array Array structure to count the elements of. ||
|| @see || 참고해야 할 내용을 적는다. <br>사용형태는 "@see [URI | Type | Type::element] [<description>]"  || @see http://example.com/my/bar Documentation of Foo.<br>@see MyClass::$items           for the property whose items are counted ||

=== Common ===
일반 주석은 ‘//’ 만 사용하는 형태를 따른다. ‘#’ 사용 금지

*CORRECT*
{{{
// break up the string by newlines
$parts = explode("\n", $str);
}}}

여러 줄의 주석을 사용하는 경우 공백 라인도 주석으로 포함한다.
*CORRECT*
{{{
// A longer comment that needs to give greater detail on what is
// occurring and why can use multiple single-line comments.  Try to
// keep the width reasonable, around 70 characters is the easiest to
// read.  Don't hesitate to link to permanent external resources
// that may provide greater detail:
//
// http://example.com/information_about_something/in_particular/
$parts = $this->foo($parts);
}}}



== Operator ==
Operrator 앞뒤로 공백을 추가 한다.

*INCORRECT*
{{{
$a = ‘a’.’b’;
$a||$b;
$a&&$b
$a+$b
$a-$b
}}}

*CORRECT*
{{{
$a = ‘a’ . ‘b’;
$a || $b;
$a && $b
$a + $b
$a - $b
}}}
